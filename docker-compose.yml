services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ssl-cert-generator  # Nginx doit attendre que ssl-cert-generator finisse
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  ssl-cert-generator:
    image: alpine
    container_name: ssl-cert-generator
    volumes:
      - ./ssl:/ssl
    command: >
      sh -c '
        apk add --no-cache openssl &&
        if [ ! -f /ssl/nginx.key ]; then
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /ssl/nginx.key -out /ssl/nginx.crt -subj "/C=FR/ST=IDF/L=Paris/O=Development/CN=localhost" &&
          chmod 644 /ssl/nginx.crt &&
          chmod 600 /ssl/nginx.key;
        else
          echo "SSL key already exists, skipping generation.";
        fi
      '

  api:
    build: .
    container_name: api
    expose:
      - "3000"
    environment:
      - DB_HOST=mariadb
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=rootpassword
      - DB_NAME=api-rest
    volumes:
      - .:/app
      - /app/node_modules
    working_dir: /app
    depends_on:
      - mariadb
    networks:
      - bdd-network
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 4
        delay: 10s
    command: >
      sh -c "
        npx sequelize-cli db:migrate && npm start
      "

  mariadb:
    image: mariadb:10.5
    container_name: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=api-rest
    ports:
      - "3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - bdd-network

volumes:
  db_data:
  ssl_data:  # Volume pour partager les certificats entre les conteneurs

networks:
  bdd-network:
  app-network:
